{"version":3,"file":"static/js/6383.042f8f06.chunk.js","mappings":"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","sources":["components/CheckDuplicate.js","components/Uploader.js","hooks/useAddPage.js","pages/user/Add.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useApi from 'hooks/useApi';\r\nconst CheckDuplicate = (props) => {\r\n\tconst [exist, setExist] = useState(false);\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst api = useApi();\r\n\t\r\n\tconst { apiPath, value } = props;\r\n\tasync function check() {\r\n\t\tconst val = encodeURIComponent(value.trim());;\r\n\t\tif (val) {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst result = await api.get(`${apiPath}/${val}`);\r\n\t\t\tif(result?.data.toString() === 'true'){\r\n\t\t\t\tsetExist(true)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tsetExist(false)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t}\r\n\treturn props.children({ loading, check, exist });\r\n}\r\n\r\nexport { CheckDuplicate }","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Avatar } from 'primereact/avatar';\r\nimport { Button } from 'primereact/button';\r\nimport useUtils from 'hooks/useUtils';\r\nimport useLocalStore from 'hooks/useLocalStore';\r\nimport useApi from 'hooks/useApi';\r\nimport { ImageViewer } from \"./ImageViewer\";\r\n\r\n\r\n\r\nconst Uploader = (props) => {\r\n\r\n\tconst utils = useUtils();\r\n\tconst api = useApi();\r\n\tconst localStore = useLocalStore();\r\n\r\n\tconst fileUploadRef = useRef(null);\r\n\r\n\tconst [uploadedFilePaths, setUploadedFilePaths] = useState([]);\r\n\tconst [uploadedFiles, setUploadedFiles] = useState([]);\r\n\tconst [disabled, setDisabled] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (props.value) {\r\n\t\t\tlet prevUploadPaths = props.value.toString().split(',');\r\n\t\t\tsetUploadedFilePaths(prevUploadPaths);\r\n\t\t}\r\n\t}, [props.value]);\r\n\r\n\tconst maxFileSize = props.maxFileSize || 10;// in mb\r\n\tconst fileLimit = props.fileLimit || 10;\r\n\tconst multiple = props.multiple;\r\n\tconst accept = props.accept;\r\n\r\n\tconst maxFileSizeInBytes = maxFileSize * 1024 * 1024;\r\n\r\n\tfunction buildUploadedFiles() {\r\n\t\tlet files = [];\r\n\t\tuploadedFilePaths.forEach(path => {\r\n\t\t\tlet fileName = path.split('\\\\').pop().split('/').pop();\r\n\t\t\tlet ext = fileName.split('.').pop().toLowerCase();\r\n\t\t\tlet imgExt = ['jpg', 'png', 'gif', 'jpeg', 'bmp'];\r\n\t\t\tlet isImage = false;\r\n\t\t\tif (imgExt.indexOf(ext) > -1) {\r\n\t\t\t\tisImage = true;\r\n\t\t\t}\r\n\t\t\tlet size = \"small\"; //use resize image for the display\r\n\t\t\tif (path.indexOf(\"temp/\") > -1) {\r\n\t\t\t\tsize = \"\";  //if image is still in temp folder use the original image\r\n\t\t\t}\r\n\t\t\tlet fileShortName = utils.strEllipsis(fileName, 15);\r\n\t\t\tfiles.push({\r\n\t\t\t\tname: fileName,\r\n\t\t\t\tshortName: fileShortName,\r\n\t\t\t\tisImage: isImage,\r\n\t\t\t\tsize: size,\r\n\t\t\t\tpath: path\r\n\t\t\t})\r\n\t\t});\r\n\t\tsetUploadedFiles(files);\r\n\t}\r\n\r\n\tfunction getUploadApiUrl() {\r\n\t\treturn utils.setApiPath(props.uploadPath);\r\n\t}\r\n\tfunction setheaders(event) {\r\n\t\tconst token = localStore.getToken();\r\n\t\tevent.xhr.setRequestHeader(\"Authorization\", `Bearer ${token}`);\r\n\t}\r\n\tfunction uploadComplete(event) {\r\n\t\tconst response = event.xhr.response;\r\n\t\tuploadedFilePaths.push(response);\r\n\t\tsetUploadedFilePaths(uploadedFilePaths);\r\n\t\tupdateModelValue();\r\n\t\tprops.onUploadCompleted(response);\r\n\t}\r\n\r\n\tfunction updateModelValue() {\r\n\t\tprops.onChange(uploadedFilePaths.toString());\r\n\t}\r\n\r\n\tasync function removeFile(file) {\r\n\t\ttry {\r\n\t\t\tlet index = uploadedFilePaths.indexOf(file.path);\r\n\t\t\tif (index !== -1) {\r\n\t\t\t\tuploadedFilePaths.splice(index, 1);\r\n\t\t\t\tsetUploadedFilePaths(uploadedFilePaths);\r\n\t\t\t\tbuildUploadedFiles();\r\n\t\t\t\tupdateModelValue();\r\n\t\t\t\tlet url = \"fileuploader/remove_temp_file\";\r\n\t\t\t\tlet formData = {\r\n\t\t\t\t\ttemp_file: file.path\r\n\t\t\t\t}\r\n\t\t\t\tawait api.post(url, formData)\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction uploadError(req) {\r\n\t\tconst errMsg = req?.xhr?.response || \"Unable to upload file\";\r\n\t\tprops.onUploadError(errMsg);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tbuildUploadedFiles();\r\n\t\tif (uploadedFilePaths.length >= fileLimit) {\r\n\t\t\tsetDisabled(true)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsetDisabled(false)\r\n\t\t}\r\n\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [uploadedFilePaths, uploadedFilePaths.length, fileLimit]);\r\n\r\n\tfunction UploadedItemsTemplate() {\r\n\t\tif (props.showUploadedFiles) {\r\n\t\t\tif (uploadedFiles.length) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"flex gap-2 flex-wrap py-2\">\r\n\t\t\t\t\t\t{uploadedFiles.map(file =>\r\n\t\t\t\t\t\t\t<div key={file.path}>\r\n\t\t\t\t\t\t\t\t{file.isImage && <div className=\"card flex justify-content-between gap-2 align-items-center p-1\">\r\n\t\t\t\t\t\t\t\t\t<ImageViewer width=\"40px\" height=\"40px\" imageSize=\"small\" src={file.path} />\r\n\t\t\t\t\t\t\t\t\t<Button type=\"button\" className=\"p-button-danger p-button-sm p-button-text\" onClick={() => removeFile(file)} icon=\"pi pi-times\" />\r\n\t\t\t\t\t\t\t\t</div>}\r\n\t\t\t\t\t\t\t\t{!file.isImage && <div className=\"flex card p-1 gap-2 justify-content-between align-items-center p-1\">\r\n\t\t\t\t\t\t\t\t\t<a target=\"_blank\" rel=\"noreferrer\" href={utils.getFileFullPath(file.path)}>\r\n\t\t\t\t\t\t\t\t\t\t<Avatar size=\"large\" icon=\"pi pi-file\" />\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-500\">{file.shortName}</span>\r\n\t\t\t\t\t\t\t\t\t<Button type=\"button\" className=\"p-button-danger p-button-sm p-button-text\" onClick={() => removeFile(file)} icon=\"pi pi-times\" />\r\n\t\t\t\t\t\t\t\t</div >}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div >\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst emptyTemplate = () => {\r\n        return (\r\n            <div className=\"flex justify-content-center align-items-center gap-3 text-500\">\r\n                <i className=\"pi pi-upload text-5xl\"></i>\r\n                <span className=\"font-bold\">{ props.label }</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\treturn (\r\n\t\t<div className=\"p-2 surface-200\">\r\n\t\t\t<FileUpload\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t\tname=\"file\"\r\n\t\t\t\tref={fileUploadRef}\r\n\t\t\t\tauto={true}\r\n\t\t\t\tmaxFileSize={maxFileSizeInBytes}\r\n\t\t\t\taccept={accept}\r\n\t\t\t\tmultiple={multiple}\r\n\t\t\t\tmode=\"advanced\"\r\n\t\t\t\turl={getUploadApiUrl()}\r\n\t\t\t\tonBeforeSend={setheaders}\r\n\t\t\t\tonUpload={uploadComplete}\r\n\t\t\t\tonError={uploadError}\r\n\t\t\t\temptyTemplate={emptyTemplate}\r\n\t\t\t\t>\r\n\t\t\t</FileUpload>\r\n\t\t\t<UploadedItemsTemplate />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nUploader.defaultProps = {\r\n\tonChange: () => { },\r\n\tonUploadCompleted: () => { },\r\n\tonUploadError: () => { },\r\n}\r\n\r\nexport { Uploader }","import { useState, useMemo } from \"react\";\r\nimport useApp from 'hooks/useApp';\r\nimport { useQueryClient, useMutation } from 'react-query';\r\nimport useApi from 'hooks/useApi';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nconst useAddPage = ({ props, formDefaultValues, afterSubmit }) => {\r\n\tconst app = useApp();\r\n\tconst api = useApi();\r\n\tconst [pageReady] = useState(true);\r\n\tconst contextFormData = app.getPageFormData(props.pageName); // from data from store\r\n\tconst propsFormData = props.formData; // when form default values is passed by component props\r\n\tconst computedFormData = { ...formDefaultValues, ...propsFormData, ...contextFormData };\r\n\tconst [formData, setFormData] = useState(computedFormData);\r\n\tconst queryClient = useQueryClient();\r\n\tconst mutation = useMutation(saveFormData, {\r\n\t\tretry: false,\r\n\t\tonSuccess: (data) => {\r\n\t\t\tqueryClient.invalidateQueries(props.pageName);\r\n\t\t\tif (afterSubmit) {\r\n\t\t\t\tafterSubmit(data);\r\n\t\t\t}\r\n\t\t},\r\n\t\tonError: (error) => {\r\n\t\t\tapp.showPageRequestError(error);\r\n\t\t},\r\n\t});\r\n\tfunction resetForm() {\r\n\t\tsetFormData(computedFormData);\r\n\t}\r\n\tfunction handleSubmit(e, formik) {\r\n\t\tif (!formik.isValid) {\r\n\t\t\tapp.flashMsg(props.formValidationError, props.formValidationMsg, \"error\");\r\n\t\t}\r\n\t}\r\n\tfunction saveFormData(formValues) {\r\n\t\tconst url = props.apiPath;\r\n\t\tlet postData;\r\n\t\tif (Array.isArray(formValues)) {\r\n\t\t\tpostData = formValues.map(form => normalizeFormData(form));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpostData = normalizeFormData(formValues)\r\n\t\t}\r\n\t\treturn api.post(url, postData).then((res) => res?.data);\r\n\t}\r\n\tfunction normalizeFormData(formValues) {\r\n\t\tconst postData = { ...formValues }\r\n\t\tObject.keys(postData).forEach(function (key) {\r\n\t\t\tconst fieldValue = postData[key];\r\n\t\t\tif (Array.isArray(fieldValue)) {\r\n\t\t\t\tlet firstItem = fieldValue[0];\r\n\t\t\t\tif(firstItem && typeof firstItem == \"string\"){\r\n\t\t\t\t\tpostData[key] = fieldValue.toString();\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tpostData[key] = fieldValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (fieldValue instanceof Date) {\r\n\t\t\t\tpostData[key] = fieldValue.toISOString().slice(0, 19).replace('T', ' ');\r\n\t\t\t}\r\n\t\t\telse if(fieldValue === ''){\r\n\t\t\t\tpostData[key] = null;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn postData;\r\n\t}\r\n\tfunction submitForm(validatedFormData) {\r\n\t\tlet confirmMsg = props.msgBeforeSave;\r\n\t\tif (confirmMsg) {\r\n\t\t\tconfirmDialog({\r\n\t\t\t\theader: props.msgTitle,\r\n\t\t\t\tmessage: confirmMsg,\r\n\t\t\t\ticon: 'pi pi-save',\r\n\t\t\t\taccept: async () => {\r\n\t\t\t\t\tmutation.mutate(validatedFormData);\r\n\t\t\t\t},\r\n\t\t\t\treject: () => {\r\n\t\t\t\t\t//callback to execute when user rejects the action\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmutation.mutate(validatedFormData);\r\n\t\t}\r\n\t}\r\n\tfunction inputClassName(hasError, className = 'w-full') {\r\n\t\tif (hasError) {\r\n\t\t\treturn `${className} p-invalid`;\r\n\t\t}\r\n\t\treturn className;\r\n\t}\r\n\tconst pageData = {\r\n\t\tsetFormData,\r\n\t\tsubmitForm,\r\n\t\tinputClassName,\r\n\t\tresetForm,\r\n\t\thandleSubmit,\r\n\t\tformData,\r\n\t\tpageReady,\r\n\t\tsaving: mutation.isLoading,\r\n\t}\r\n\treturn useMemo(() => pageData,\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t\t[formData, pageReady, mutation.isLoading]\r\n\t);\r\n}\r\nexport default useAddPage","import { Formik, Form, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { Button } from 'primereact/button';\r\nimport { CheckDuplicate } from 'components/CheckDuplicate';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { Title } from 'components/Title';\r\nimport { Uploader } from 'components/Uploader';\r\nimport useApp from 'hooks/useApp';\r\n\r\nimport useAddPage from 'hooks/useAddPage';\r\nconst UserAddPage = (props) => {\r\n\t\tconst app = useApp();\r\n\t\r\n\t//form validation rules\r\n\tconst validationSchema = yup.object().shape({\r\n\t\tusername: yup.string().required().label(\"Username\"),\r\n\t\tpassword: yup.string().required().label(\"Password\"),\r\n\t\tconfirm_password: yup.string().required().label(\"Confirm Password\").oneOf([yup.ref('password')], \"Your passwords do not match\"),\r\n\t\temail: yup.string().email().required().label(\"Email\"),\r\n\t\ttelp: yup.string().nullable().label(\"Telp\"),\r\n\t\tfoto_user: yup.string().required().label(\"Foto User\")\r\n\t});\r\n\t\r\n\t//form default values\r\n\tconst formDefaultValues = {\r\n\t\tusername: '', \r\n\t\tpassword: '', \r\n\t\tconfirm_password: '', \r\n\t\temail: '', \r\n\t\ttelp: \"NULL\", \r\n\t\tfoto_user: '', \r\n\t}\r\n\t\r\n\t//page hook where logics resides\r\n\tconst pageController =  useAddPage({ props, formDefaultValues, afterSubmit });\r\n\t\r\n\t// destructure and grab what the page needs\r\n\tconst { formData, resetForm, handleSubmit, submitForm, pageReady, loading, saving, inputClassName } = pageController;\r\n\t\r\n\t//event raised after form submit\r\n\tfunction afterSubmit(response){\r\n\t\tapp.flashMsg(props.msgTitle, props.msgAfterSave);\r\n\t\tresetForm();\r\n\t\tif(app.isDialogOpen()){\r\n\t\t\tapp.closeDialogs(); // if page is open as dialog, close dialog\r\n\t\t}\r\n\t\telse if(props.redirect) {\r\n\t\t\tapp.navigate(`/user`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t// page loading form data from api\r\n\tif(loading){\r\n\t\treturn (\r\n\t\t\t<div className=\"p-3 text-center\">\r\n\t\t\t\t<ProgressSpinner style={{width:'50px', height:'50px'}} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\t//page has loaded any required data and ready to render\r\n\tif(pageReady){\r\n\t\treturn (\r\n<main id=\"UserAddPage\" className=\"main-page\">\r\n    { (props.showHeader) && \r\n    <section className=\"page-section mb-3\" >\r\n        <div className=\"container\">\r\n            <div className=\"grid align-items-center\">\r\n                { !props.isSubPage && \r\n                <div className=\"col-fixed \" >\r\n                    <Button onClick={() => app.navigate(-1)} label=\"\"  className=\"p-button p-button-text \" icon=\"pi pi-arrow-left\"  />\r\n                </div>\r\n                }\r\n                <div className=\"col \" >\r\n                    <Title title=\"Tambah  User\"   titleClass=\"text-2xl text-primary font-bold\" subTitleClass=\"text-sm text-500\"      separator={false} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    }\r\n    <section className=\"page-section \" >\r\n        <div className=\"container\">\r\n            <div className=\"grid \">\r\n                <div className=\"md:col-9 sm:col-12 comp-grid\" >\r\n                    <div >\r\n                        <Formik initialValues={formData} validationSchema={validationSchema} onSubmit={(values, actions) =>submitForm(values)}>\r\n                            {(formik) => \r\n                            <>\r\n                            <Form className={`${!props.isSubPage ? 'card ' : ''}`}>\r\n                                <div className=\"grid\">\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Username *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <CheckDuplicate value={formik.values.username} apiPath=\"components_data/user_username_exist\">\r\n                                                { (checker) => \r\n                                                <>\r\n                                                <InputText name=\"username\" onBlur={checker.check} onChange={formik.handleChange}  value={formik.values.username}   label=\"Username\" type=\"text\" placeholder=\"Enter Username\"        className={inputClassName(formik?.errors?.username)} />\r\n                                                <ErrorMessage name=\"username\" component=\"span\" className=\"p-error\" />\r\n                                                {(!checker.loading && checker.exist) && <small className=\"p-error\">Not available</small>}\r\n                                                {checker.loading && <small className=\"text-500\">Checking...</small> }\r\n                                                </>\r\n                                                }\r\n                                                </CheckDuplicate>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Password *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <Password name=\"password\" value={formik.values.password} onChange={formik.handleChange} label=\"Password\" placeholder=\"Enter Password\"  inputClassName=\"w-full\" toggleMask feedback className={inputClassName(formik?.errors?.password)} />\r\n                                                <ErrorMessage name=\"password\" component=\"span\" className=\"p-error\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Confirm Password *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <Password name=\"confirm_password\" id=\"confirm_password\" className={inputClassName(formik?.errors?.comfirm_password)} inputClassName=\"w-full\" feedback={false} toggleMask  value={formik.values.confirm_password} onChange={formik.handleChange} label=\"Confirm Password\" placeholder=\"Confirm Password\"  />\r\n                                                <ErrorMessage name=\"confirm_password\" component=\"span\" className=\"p-error\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Email *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <CheckDuplicate value={formik.values.email} apiPath=\"components_data/user_email_exist\">\r\n                                                { (checker) => \r\n                                                <>\r\n                                                <InputText name=\"email\" onBlur={checker.check} onChange={formik.handleChange}  value={formik.values.email}   label=\"Email\" type=\"email\" placeholder=\"Enter Email\"        className={inputClassName(formik?.errors?.email)} />\r\n                                                <ErrorMessage name=\"email\" component=\"span\" className=\"p-error\" />\r\n                                                {(!checker.loading && checker.exist) && <small className=\"p-error\">Not available</small>}\r\n                                                {checker.loading && <small className=\"text-500\">Checking...</small> }\r\n                                                </>\r\n                                                }\r\n                                                </CheckDuplicate>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Telp \r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <InputText name=\"telp\"  onChange={formik.handleChange}  value={formik.values.telp}   label=\"Telp\" type=\"text\" placeholder=\"Enter Telp\"        className={inputClassName(formik?.errors?.telp)} />\r\n                                                <ErrorMessage name=\"telp\" component=\"span\" className=\"p-error\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Foto User *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <div className={inputClassName(formik?.errors?.foto_user)}>\r\n                                                    <Uploader name=\"foto_user\" showUploadedFiles value={formik.values.foto_user} uploadPath=\"fileuploader/upload/foto_user\" onChange={(paths) => formik.setFieldValue('foto_user', paths)} fileLimit={1} maxFileSize={1024} accept=\".jpg,.png,.gif,.jpeg\" multiple={false} label=\"Choose files or drop files here\" onUploadError={(errMsg) => app.flashMsg('Upload error', errMsg, 'error')} />\r\n                                                </div>\r\n                                                <ErrorMessage name=\"foto_user\" component=\"span\" className=\"p-error\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                { props.showFooter && \r\n                                <div className=\"text-center my-3\">\r\n                                    <Button onClick={(e) => handleSubmit(e, formik)} className=\"p-button-primary\" type=\"submit\" label=\"Simpan\" icon=\"pi pi-send\" loading={saving} />\r\n                                </div>\r\n                                }\r\n                            </Form>\r\n                            </>\r\n                            }\r\n                            </Formik>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n//page props and default values\r\nUserAddPage.defaultProps = {\r\n\tprimaryKey: 'id_user',\r\n\tpageName: 'user',\r\n\tapiPath: 'user/add',\r\n\trouteName: 'useradd',\r\n\tsubmitButtonLabel: \"Simpan\",\r\n\tformValidationError: \"Form is invalid\",\r\n\tformValidationMsg: \"Please complete the form\",\r\n\tmsgTitle: 'Create Record',\r\n\tmsgAfterSave: \"Data Berhasil Di Simpan !\",\r\n\tmsgBeforeSave: \"\",\r\n\tshowHeader: true,\r\n\tshowFooter: true,\r\n\tredirect: true,\r\n\tisSubPage: false\r\n}\r\nexport default UserAddPage;\r\n"],"names":["CheckDuplicate","props","useState","exist","setExist","loading","setLoading","api","useApi","apiPath","value","val","encodeURIComponent","trim","get","result","data","toString","children","check","Uploader","utils","useUtils","localStore","useLocalStore","fileUploadRef","useRef","uploadedFilePaths","setUploadedFilePaths","uploadedFiles","setUploadedFiles","disabled","setDisabled","useEffect","prevUploadPaths","split","maxFileSize","fileLimit","multiple","accept","maxFileSizeInBytes","buildUploadedFiles","files","forEach","path","fileName","pop","ext","toLowerCase","isImage","indexOf","size","fileShortName","strEllipsis","push","name","shortName","updateModelValue","onChange","removeFile","file","index","splice","formData","temp_file","post","console","error","UploadedItemsTemplate","showUploadedFiles","length","className","map","width","height","imageSize","src","type","onClick","icon","target","rel","href","getFileFullPath","ref","auto","mode","url","setApiPath","uploadPath","onBeforeSend","event","token","getToken","xhr","setRequestHeader","onUpload","response","onUploadCompleted","onError","req","errMsg","onUploadError","emptyTemplate","label","defaultProps","formDefaultValues","afterSubmit","app","useApp","pageReady","contextFormData","getPageFormData","pageName","propsFormData","computedFormData","setFormData","queryClient","useQueryClient","mutation","useMutation","formValues","postData","Array","isArray","form","normalizeFormData","then","res","retry","onSuccess","invalidateQueries","showPageRequestError","Object","keys","key","fieldValue","firstItem","Date","toISOString","slice","replace","pageData","submitForm","validatedFormData","confirmMsg","msgBeforeSave","confirmDialog","header","msgTitle","message","mutate","reject","inputClassName","hasError","resetForm","handleSubmit","e","formik","isValid","flashMsg","formValidationError","formValidationMsg","saving","isLoading","useMemo","UserAddPage","validationSchema","yup","shape","username","required","password","confirm_password","oneOf","email","telp","nullable","foto_user","pageController","useAddPage","msgAfterSave","isDialogOpen","closeDialogs","redirect","navigate","style","id","showHeader","isSubPage","title","titleClass","subTitleClass","separator","initialValues","onSubmit","values","actions","checker","onBlur","handleChange","placeholder","errors","component","toggleMask","feedback","comfirm_password","paths","setFieldValue","showFooter","primaryKey","routeName","submitButtonLabel"],"sourceRoot":""}