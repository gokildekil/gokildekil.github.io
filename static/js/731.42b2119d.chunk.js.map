{"version":3,"file":"static/js/731.42b2119d.chunk.js","mappings":"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","sources":["components/CheckDuplicate.js","pages/account/Accountview.js","pages/user/Edit.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useApi from 'hooks/useApi';\r\nconst CheckDuplicate = (props) => {\r\n\tconst [exist, setExist] = useState(false);\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst api = useApi();\r\n\t\r\n\tconst { apiPath, value } = props;\r\n\tasync function check() {\r\n\t\tconst val = encodeURIComponent(value.trim());;\r\n\t\tif (val) {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst result = await api.get(`${apiPath}/${val}`);\r\n\t\t\tif(result?.data.toString() === 'true'){\r\n\t\t\t\tsetExist(true)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tsetExist(false)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t}\r\n\treturn props.children({ loading, check, exist });\r\n}\r\n\r\nexport { CheckDuplicate }","import { Button } from 'primereact/button';\r\nimport { Menubar } from 'primereact/menubar';\r\nimport { PageRequestError } from 'components/PageRequestError';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport RolesViewPage from 'pages/roles/View';\r\nimport useApp from 'hooks/useApp';\r\nimport UserEditPage from 'pages/user/Edit';\r\n\r\nimport useViewPage from 'hooks/useViewPage';\r\nconst UserAccountviewPage = (props) => {\r\n\t\tconst app = useApp();\r\n\tconst pageController = useViewPage(props);\r\n\tconst { item, pageReady, loading, apiRequestError, deleteItem } = pageController;\r\n\tconst pageExportFormats =  [\r\n\t\t'pdf'\r\n\t];\r\n\tfunction ActionButton(data){\r\n\t\tconst items = [\r\n\t\t{\r\n\t\t\tlabel: \"Edit\",\r\n\t\t\tcommand: (event) => { app.openPageDialog(<UserEditPage isSubPage apiPath={`/user/edit/${data.id_user}`} />, {closeBtn: true }) },\r\n\t\t\ticon: \"pi pi-pencil\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: \"Delete\",\r\n\t\t\tcommand: (event) => { deleteItem(data.id_user) },\r\n\t\t\ticon: \"pi pi-trash\"\r\n\t\t}\r\n\t]\r\n\t\treturn (<Menubar className=\"p-0 \" model={items} />);\r\n\t}\r\n\tfunction PageFooter() {\r\n\t\tif (props.showFooter) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"flex justify-content-between\">\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\tif(loading){\r\n\t\treturn (\r\n\t\t\t<div className=\"p-3 text-center\">\r\n\t\t\t\t<ProgressSpinner style={{width:'50px', height:'50px'}} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\tif(apiRequestError){\r\n\t\treturn (\r\n\t\t\t<PageRequestError error={apiRequestError} />\r\n\t\t);\r\n\t}\r\n\tif(pageReady){\r\n\t\treturn (\r\n\t\t\t<div>\r\n<main id=\"UserAccountviewPage\" className=\"main-page\">\r\n    <section className=\"page-section \" >\r\n        <div className=\"container\">\r\n            <div className=\"grid \">\r\n                <div className=\"col comp-grid\" >\r\n                    <div >\r\n                        {/*PageComponentStart*/}\r\n                        <div className=\"mb-3 grid justify-content-start\">\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">Id User</div>\r\n                                        <div className=\"font-bold\">{ item.id_user }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">Username</div>\r\n                                        <div className=\"font-bold\">{ item.username }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">Email</div>\r\n                                        <div className=\"font-bold\">{ item.email }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">Telp</div>\r\n                                        <div className=\"font-bold\">{ item.telp }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">User Role Id</div>\r\n                                        <div className=\"font-bold\">{item.user_role_id && <Button className=\"p-button-text\" icon=\"pi pi-eye\" label=\"Roles Detail\" onClick={() => app.openPageDialog(<RolesViewPage isSubPage apiPath={`/roles/view/${item.user_role_id}`} />, {closeBtn: true })} /> }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex justify-content-between\">\r\n                            {props.exportButton && <Button icon=\"pi pi-print\" className=\"mx-xs\" title=\"Export\" /> }\r\n                            <div className=\"flex justify-content-start\">\r\n                                {ActionButton(item)}\r\n                            </div>\r\n                        </div>\r\n                        {/*PageComponentEnd*/}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</main>\r\n\t\t\t\t<PageFooter />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nUserAccountviewPage.defaultProps = {\r\n\tid: null,\r\n\tprimaryKey: 'id_user',\r\n\tpageName: 'user',\r\n\tapiPath: 'account',\r\n\trouteName: 'useraccountview',\r\n\tmsgBeforeDelete: \"Yakin Menghapus Data Ini?\",\r\n\tmsgTitle: 'Delete Record',\r\n\tmsgAfterDelete: \"Data Berhasil Di Hapus !\",\r\n\tshowHeader: true,\r\n\tshowFooter: true,\r\n\texportButton: true,\r\n\tisSubPage: false,\r\n}\r\nexport default UserAccountviewPage;\r\n","import { Formik, Form, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { Button } from 'primereact/button';\r\nimport { CheckDuplicate } from 'components/CheckDuplicate';\r\nimport { DataSource } from 'components/DataSource';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { PageRequestError } from 'components/PageRequestError';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { Title } from 'components/Title';\r\nimport { Uploader } from 'components/Uploader';\r\nimport useApp from 'hooks/useApp';\r\n\r\nimport useEditPage from 'hooks/useEditPage';\r\nconst UserEditPage = (props) => {\r\n\t\tconst app = useApp();\r\n\t// form validation schema\r\n\tconst validationSchema = yup.object().shape({\r\n\t\tusername: yup.string().required().label(\"Username\"),\r\n\t\ttelp: yup.string().nullable().label(\"Telp\"),\r\n\t\tfoto_user: yup.string().required().label(\"Foto User\"),\r\n\t\tuser_role_id: yup.number().nullable().label(\"User Role Id\")\r\n\t});\r\n\t// form default values\r\n\tconst formDefaultValues = {\r\n\t\tusername: '', \r\n\t\ttelp: \"NULL\", \r\n\t\tfoto_user: '', \r\n\t\tuser_role_id: '', \r\n\t}\r\n\t//where page logics resides\r\n\tconst pageController = useEditPage({ props, formDefaultValues, afterSubmit });\r\n\t//destructure and grab what we need\r\n\tconst { formData, handleSubmit, submitForm, pageReady, loading, saving, apiRequestError, inputClassName } = pageController\r\n\t//Event raised on form submit success\r\n\tfunction afterSubmit(response){\r\n\t\tapp.flashMsg(props.msgTitle, props.msgAfterSave);\r\n\t\tif(app.isDialogOpen()){\r\n\t\t\tapp.closeDialogs(); // if page is open as dialog, close dialog\r\n\t\t}\r\n\t\telse if(props.redirect) {\r\n\t\t\tapp.navigate(`/user`);\r\n\t\t}\r\n\t}\r\n\t// loading form data from api\r\n\tif(loading){\r\n\t\treturn (\r\n\t\t\t<div className=\"p-3 text-center\">\r\n\t\t\t\t<ProgressSpinner style={{width:'50px', height:'50px'}} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t//display error page \r\n\tif(apiRequestError){\r\n\t\treturn (\r\n\t\t\t<PageRequestError error={apiRequestError} />\r\n\t\t);\r\n\t}\r\n\t//page is ready when formdata loaded successfully\r\n\tif(pageReady){\r\n\t\treturn (\r\n<main id=\"UserEditPage\" className=\"main-page\">\r\n    { (props.showHeader) && \r\n    <section className=\"page-section mb-3\" >\r\n        <div className=\"container\">\r\n            <div className=\"grid align-items-center\">\r\n                { !props.isSubPage && \r\n                <div className=\"col-fixed \" >\r\n                    <Button onClick={() => app.navigate(-1)} label=\"\"  className=\"p-button p-button-text \" icon=\"pi pi-arrow-left\"  />\r\n                </div>\r\n                }\r\n                <div className=\"col \" >\r\n                    <Title title=\"Edit User\"   titleClass=\"text-2xl text-primary font-bold\" subTitleClass=\"text-sm text-500\"      separator={false} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    }\r\n    <section className=\"page-section \" >\r\n        <div className=\"container\">\r\n            <div className=\"grid \">\r\n                <div className=\"md:col-9 sm:col-12 comp-grid\" >\r\n                    <div >\r\n                        <Formik\r\n                            initialValues={formData}\r\n                            validationSchema={validationSchema} \r\n                            onSubmit={(values, actions) => {\r\n                            submitForm(values);\r\n                            }\r\n                            }\r\n                            >\r\n                            { (formik) => {\r\n                            return (\r\n                            <Form className={`${!props.isSubPage ? 'card ' : ''}`}>\r\n                                <div className=\"grid\">\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Username *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <CheckDuplicate value={formik.values.username} apiPath=\"components_data/user_username_exist\">\r\n                                                { (checker) => \r\n                                                <>\r\n                                                <InputText name=\"username\" onBlur={checker.check} onChange={formik.handleChange}  value={formik.values.username}   label=\"Username\" type=\"text\" placeholder=\"Enter Username\"        className={inputClassName(formik?.errors?.username)} />\r\n                                                <ErrorMessage name=\"username\" component=\"span\" className=\"p-error\" />\r\n                                                {(!checker.loading && checker.exist) && <small className=\"p-error\">Not available</small>}\r\n                                                {checker.loading && <small className=\"text-500\">Checking...</small> }\r\n                                                </>\r\n                                                }\r\n                                                </CheckDuplicate>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Telp \r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <InputText name=\"telp\"  onChange={formik.handleChange}  value={formik.values.telp}   label=\"Telp\" type=\"text\" placeholder=\"Enter Telp\"        className={inputClassName(formik?.errors?.telp)} />\r\n                                                <ErrorMessage name=\"telp\" component=\"span\" className=\"p-error\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Foto User *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <div className={inputClassName(formik?.errors?.foto_user)}>\r\n                                                    <Uploader name=\"foto_user\" showUploadedFiles value={formik.values.foto_user} uploadPath=\"fileuploader/upload/foto_user\" onChange={(paths) => formik.setFieldValue('foto_user', paths)} fileLimit={1} maxFileSize={1024} accept=\".jpg,.png,.gif,.jpeg\" multiple={false} label=\"Choose files or drop files here\" onUploadError={(errMsg) => app.flashMsg('Upload error', errMsg, 'error')} />\r\n                                                </div>\r\n                                                <ErrorMessage name=\"foto_user\" component=\"span\" className=\"p-error\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                User Role Id \r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <DataSource   apiPath=\"components_data/role_id_option_list\" >\r\n                                                    {\r\n                                                    ({ response  }) => \r\n                                                    <>\r\n                                                    <Dropdown  name=\"user_role_id\"     optionLabel=\"label\" optionValue=\"value\" value={formik.values.user_role_id} onChange={formik.handleChange} options={response} label=\"User Role Id\"  placeholder=\"Select a value ...\"  className={inputClassName(formik?.errors?.user_role_id)}   />\r\n                                                    <ErrorMessage name=\"user_role_id\" component=\"span\" className=\"p-error\" />\r\n                                                    </>\r\n                                                    }\r\n                                                </DataSource>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                { props.showFooter && \r\n                                <div className=\"text-center my-3\">\r\n                                    <Button onClick={(e) => handleSubmit(e, formik)}  type=\"submit\" label=\"Perbaharui\" icon=\"pi pi-send\" loading={saving} />\r\n                                </div>\r\n                                }\r\n                            </Form>\r\n                            );\r\n                            }\r\n                            }\r\n                            </Formik>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </main>\r\n\t\t);\r\n\t}\r\n}\r\nUserEditPage.defaultProps = {\r\n\tprimaryKey: 'id_user',\r\n\tpageName: 'user',\r\n\tapiPath: 'user/edit',\r\n\trouteName: 'useredit',\r\n\tsubmitButtonLabel: \"Perbaharui\",\r\n\tformValidationError: \"Form is invalid\",\r\n\tformValidationMsg: \"Please complete the form\",\r\n\tmsgTitle: 'Update Record',\r\n\tmsgAfterSave: \"Data Berhasil Di Perbaharui !\",\r\n\tmsgBeforeSave: \"\",\r\n\tshowHeader: true,\r\n\tshowFooter: true,\r\n\tredirect: true,\r\n\tisSubPage: false\r\n}\r\nexport default UserEditPage;\r\n"],"names":["CheckDuplicate","props","useState","exist","setExist","loading","setLoading","api","useApi","apiPath","value","val","encodeURIComponent","trim","get","result","data","toString","children","check","UserAccountviewPage","app","useApp","pageController","useViewPage","item","pageReady","apiRequestError","deleteItem","PageFooter","showFooter","className","style","width","height","error","id","id_user","username","email","telp","user_role_id","icon","label","onClick","openPageDialog","isSubPage","closeBtn","exportButton","title","items","command","event","model","ActionButton","defaultProps","primaryKey","pageName","routeName","msgBeforeDelete","msgTitle","msgAfterDelete","showHeader","UserEditPage","validationSchema","yup","shape","required","nullable","foto_user","useEditPage","formDefaultValues","afterSubmit","response","flashMsg","msgAfterSave","isDialogOpen","closeDialogs","redirect","navigate","formData","handleSubmit","submitForm","saving","inputClassName","titleClass","subTitleClass","separator","initialValues","onSubmit","values","actions","formik","checker","name","onBlur","onChange","handleChange","type","placeholder","errors","component","showUploadedFiles","uploadPath","paths","setFieldValue","fileLimit","maxFileSize","accept","multiple","onUploadError","errMsg","optionLabel","optionValue","options","e","submitButtonLabel","formValidationError","formValidationMsg","msgBeforeSave"],"sourceRoot":""}