{"version":3,"file":"static/js/8755.32fcbc54.chunk.js","mappings":"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","sources":["components/CheckDuplicate.js","pages/user/Edit.js","pages/user/View.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useApi from 'hooks/useApi';\r\nconst CheckDuplicate = (props) => {\r\n\tconst [exist, setExist] = useState(false);\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst api = useApi();\r\n\t\r\n\tconst { apiPath, value } = props;\r\n\tasync function check() {\r\n\t\tconst val = encodeURIComponent(value.trim());;\r\n\t\tif (val) {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst result = await api.get(`${apiPath}/${val}`);\r\n\t\t\tif(result?.data.toString() === 'true'){\r\n\t\t\t\tsetExist(true)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tsetExist(false)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t}\r\n\treturn props.children({ loading, check, exist });\r\n}\r\n\r\nexport { CheckDuplicate }","import { Formik, Form, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { Button } from 'primereact/button';\r\nimport { CheckDuplicate } from 'components/CheckDuplicate';\r\nimport { DataSource } from 'components/DataSource';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { PageRequestError } from 'components/PageRequestError';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { Title } from 'components/Title';\r\nimport { Uploader } from 'components/Uploader';\r\nimport useApp from 'hooks/useApp';\r\n\r\nimport useEditPage from 'hooks/useEditPage';\r\nconst UserEditPage = (props) => {\r\n\t\tconst app = useApp();\r\n\t// form validation schema\r\n\tconst validationSchema = yup.object().shape({\r\n\t\tusername: yup.string().required().label(\"Username\"),\r\n\t\ttelp: yup.string().nullable().label(\"Telp\"),\r\n\t\tfoto_user: yup.string().required().label(\"Foto User\"),\r\n\t\tuser_role_id: yup.number().nullable().label(\"User Role Id\")\r\n\t});\r\n\t// form default values\r\n\tconst formDefaultValues = {\r\n\t\tusername: '', \r\n\t\ttelp: \"NULL\", \r\n\t\tfoto_user: '', \r\n\t\tuser_role_id: '', \r\n\t}\r\n\t//where page logics resides\r\n\tconst pageController = useEditPage({ props, formDefaultValues, afterSubmit });\r\n\t//destructure and grab what we need\r\n\tconst { formData, handleSubmit, submitForm, pageReady, loading, saving, apiRequestError, inputClassName } = pageController\r\n\t//Event raised on form submit success\r\n\tfunction afterSubmit(response){\r\n\t\tapp.flashMsg(props.msgTitle, props.msgAfterSave);\r\n\t\tif(app.isDialogOpen()){\r\n\t\t\tapp.closeDialogs(); // if page is open as dialog, close dialog\r\n\t\t}\r\n\t\telse if(props.redirect) {\r\n\t\t\tapp.navigate(`/user`);\r\n\t\t}\r\n\t}\r\n\t// loading form data from api\r\n\tif(loading){\r\n\t\treturn (\r\n\t\t\t<div className=\"p-3 text-center\">\r\n\t\t\t\t<ProgressSpinner style={{width:'50px', height:'50px'}} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t//display error page \r\n\tif(apiRequestError){\r\n\t\treturn (\r\n\t\t\t<PageRequestError error={apiRequestError} />\r\n\t\t);\r\n\t}\r\n\t//page is ready when formdata loaded successfully\r\n\tif(pageReady){\r\n\t\treturn (\r\n<main id=\"UserEditPage\" className=\"main-page\">\r\n    { (props.showHeader) && \r\n    <section className=\"page-section mb-3\" >\r\n        <div className=\"container\">\r\n            <div className=\"grid align-items-center\">\r\n                { !props.isSubPage && \r\n                <div className=\"col-fixed \" >\r\n                    <Button onClick={() => app.navigate(-1)} label=\"\"  className=\"p-button p-button-text \" icon=\"pi pi-arrow-left\"  />\r\n                </div>\r\n                }\r\n                <div className=\"col \" >\r\n                    <Title title=\"Edit User\"   titleClass=\"text-2xl text-primary font-bold\" subTitleClass=\"text-sm text-500\"      separator={false} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    }\r\n    <section className=\"page-section \" >\r\n        <div className=\"container\">\r\n            <div className=\"grid \">\r\n                <div className=\"md:col-9 sm:col-12 comp-grid\" >\r\n                    <div >\r\n                        <Formik\r\n                            initialValues={formData}\r\n                            validationSchema={validationSchema} \r\n                            onSubmit={(values, actions) => {\r\n                            submitForm(values);\r\n                            }\r\n                            }\r\n                            >\r\n                            { (formik) => {\r\n                            return (\r\n                            <Form className={`${!props.isSubPage ? 'card ' : ''}`}>\r\n                                <div className=\"grid\">\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Username *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <CheckDuplicate value={formik.values.username} apiPath=\"components_data/user_username_exist\">\r\n                                                { (checker) => \r\n                                                <>\r\n                                                <InputText name=\"username\" onBlur={checker.check} onChange={formik.handleChange}  value={formik.values.username}   label=\"Username\" type=\"text\" placeholder=\"Enter Username\"        className={inputClassName(formik?.errors?.username)} />\r\n                                                <ErrorMessage name=\"username\" component=\"span\" className=\"p-error\" />\r\n                                                {(!checker.loading && checker.exist) && <small className=\"p-error\">Not available</small>}\r\n                                                {checker.loading && <small className=\"text-500\">Checking...</small> }\r\n                                                </>\r\n                                                }\r\n                                                </CheckDuplicate>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Telp \r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <InputText name=\"telp\"  onChange={formik.handleChange}  value={formik.values.telp}   label=\"Telp\" type=\"text\" placeholder=\"Enter Telp\"        className={inputClassName(formik?.errors?.telp)} />\r\n                                                <ErrorMessage name=\"telp\" component=\"span\" className=\"p-error\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                Foto User *\r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <div className={inputClassName(formik?.errors?.foto_user)}>\r\n                                                    <Uploader name=\"foto_user\" showUploadedFiles value={formik.values.foto_user} uploadPath=\"fileuploader/upload/foto_user\" onChange={(paths) => formik.setFieldValue('foto_user', paths)} fileLimit={1} maxFileSize={1024} accept=\".jpg,.png,.gif,.jpeg\" multiple={false} label=\"Choose files or drop files here\" onUploadError={(errMsg) => app.flashMsg('Upload error', errMsg, 'error')} />\r\n                                                </div>\r\n                                                <ErrorMessage name=\"foto_user\" component=\"span\" className=\"p-error\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        <div className=\"formgrid grid\">\r\n                                            <div className=\"col-12 md:col-3\">\r\n                                                User Role Id \r\n                                            </div>\r\n                                            <div className=\"col-12 md:col-9\">\r\n                                                <DataSource   apiPath=\"components_data/role_id_option_list\" >\r\n                                                    {\r\n                                                    ({ response  }) => \r\n                                                    <>\r\n                                                    <Dropdown  name=\"user_role_id\"     optionLabel=\"label\" optionValue=\"value\" value={formik.values.user_role_id} onChange={formik.handleChange} options={response} label=\"User Role Id\"  placeholder=\"Select a value ...\"  className={inputClassName(formik?.errors?.user_role_id)}   />\r\n                                                    <ErrorMessage name=\"user_role_id\" component=\"span\" className=\"p-error\" />\r\n                                                    </>\r\n                                                    }\r\n                                                </DataSource>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                { props.showFooter && \r\n                                <div className=\"text-center my-3\">\r\n                                    <Button onClick={(e) => handleSubmit(e, formik)}  type=\"submit\" label=\"Perbaharui\" icon=\"pi pi-send\" loading={saving} />\r\n                                </div>\r\n                                }\r\n                            </Form>\r\n                            );\r\n                            }\r\n                            }\r\n                            </Formik>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </main>\r\n\t\t);\r\n\t}\r\n}\r\nUserEditPage.defaultProps = {\r\n\tprimaryKey: 'id_user',\r\n\tpageName: 'user',\r\n\tapiPath: 'user/edit',\r\n\trouteName: 'useredit',\r\n\tsubmitButtonLabel: \"Perbaharui\",\r\n\tformValidationError: \"Form is invalid\",\r\n\tformValidationMsg: \"Please complete the form\",\r\n\tmsgTitle: 'Update Record',\r\n\tmsgAfterSave: \"Data Berhasil Di Perbaharui !\",\r\n\tmsgBeforeSave: \"\",\r\n\tshowHeader: true,\r\n\tshowFooter: true,\r\n\tredirect: true,\r\n\tisSubPage: false\r\n}\r\nexport default UserEditPage;\r\n","import { Button } from 'primereact/button';\r\nimport { Menubar } from 'primereact/menubar';\r\nimport { PageRequestError } from 'components/PageRequestError';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { Title } from 'components/Title';\r\nimport RolesViewPage from 'pages/roles/View';\r\nimport useApp from 'hooks/useApp';\r\nimport UserEditPage from 'pages/user/Edit';\r\n\r\nimport useViewPage from 'hooks/useViewPage';\r\nconst UserViewPage = (props) => {\r\n\t\tconst app = useApp();\r\n\tconst pageController = useViewPage(props);\r\n\tconst { item, pageReady, loading, apiRequestError, deleteItem } = pageController;\r\n\tconst pageExportFormats =  [\r\n\t\t'pdf'\r\n\t];\r\n\tfunction ActionButton(data){\r\n\t\tconst items = [\r\n\t\t{\r\n\t\t\tlabel: \"Edit\",\r\n\t\t\tcommand: (event) => { app.openPageDialog(<UserEditPage isSubPage apiPath={`/user/edit/${data.id_user}`} />, {closeBtn: true }) },\r\n\t\t\ticon: \"pi pi-pencil\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: \"Delete\",\r\n\t\t\tcommand: (event) => { deleteItem(data.id_user) },\r\n\t\t\ticon: \"pi pi-trash\"\r\n\t\t}\r\n\t]\r\n\t\treturn (<Menubar className=\"p-0 \" model={items} />);\r\n\t}\r\n\tfunction PageFooter() {\r\n\t\tif (props.showFooter) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"flex justify-content-between\">\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\tif(loading){\r\n\t\treturn (\r\n\t\t\t<div className=\"p-3 text-center\">\r\n\t\t\t\t<ProgressSpinner style={{width:'50px', height:'50px'}} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\tif(apiRequestError){\r\n\t\treturn (\r\n\t\t\t<PageRequestError error={apiRequestError} />\r\n\t\t);\r\n\t}\r\n\tif(pageReady){\r\n\t\treturn (\r\n\t\t\t<div>\r\n<main id=\"UserViewPage\" className=\"main-page\">\r\n    { (props.showHeader) && \r\n    <section className=\"page-section mb-3\" >\r\n        <div className=\"container\">\r\n            <div className=\"grid align-items-center\">\r\n                { !props.isSubPage && \r\n                <div className=\"col-fixed \" >\r\n                    <Button onClick={() => app.navigate(-1)} label=\"\"  className=\"p-button p-button-text \" icon=\"pi pi-arrow-left\"  />\r\n                </div>\r\n                }\r\n                <div className=\"col \" >\r\n                    <Title title=\"User Details\"   titleClass=\"text-2xl text-primary font-bold\" subTitleClass=\"text-sm text-500\"      separator={false} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    }\r\n    <section className=\"page-section \" >\r\n        <div className=\"container\">\r\n            <div className=\"grid \">\r\n                <div className=\"col comp-grid\" >\r\n                    <div >\r\n                        {/*PageComponentStart*/}\r\n                        <div className=\"mb-3 grid justify-content-start\">\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">Username</div>\r\n                                        <div className=\"font-bold\">{ item.username }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">Email</div>\r\n                                        <div className=\"font-bold\">{ item.email }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">Telp</div>\r\n                                        <div className=\"font-bold\">{ item.telp }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 md:col-4\">\r\n                                <div className=\"flex gap-3 align-items-center card p-3\">\r\n                                    <div className=\"\">\r\n                                        <div className=\"text-400 font-medium mb-1\">User Role Id</div>\r\n                                        <div className=\"font-bold\">{item.user_role_id && <Button className=\"p-button-text\" icon=\"pi pi-eye\" label=\"Roles Detail\" onClick={() => app.openPageDialog(<RolesViewPage isSubPage apiPath={`/roles/view/${item.user_role_id}`} />, {closeBtn: true })} /> }</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex justify-content-between\">\r\n                            {props.exportButton && <Button icon=\"pi pi-print\" className=\"mx-xs\" title=\"Export\" /> }\r\n                            <div className=\"flex justify-content-start\">\r\n                                {ActionButton(item)}\r\n                            </div>\r\n                        </div>\r\n                        {/*PageComponentEnd*/}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</main>\r\n\t\t\t\t<PageFooter />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nUserViewPage.defaultProps = {\r\n\tid: null,\r\n\tprimaryKey: 'id_user',\r\n\tpageName: 'user',\r\n\tapiPath: 'user/view',\r\n\trouteName: 'userview',\r\n\tmsgBeforeDelete: \"Yakin Menghapus Data Ini?\",\r\n\tmsgTitle: 'Delete Record',\r\n\tmsgAfterDelete: \"Data Berhasil Di Hapus !\",\r\n\tshowHeader: true,\r\n\tshowFooter: true,\r\n\texportButton: true,\r\n\tisSubPage: false,\r\n}\r\nexport default UserViewPage;\r\n"],"names":["CheckDuplicate","props","useState","exist","setExist","loading","setLoading","api","useApi","apiPath","value","val","encodeURIComponent","trim","get","result","data","toString","children","check","UserEditPage","app","useApp","validationSchema","yup","shape","username","required","label","telp","nullable","foto_user","user_role_id","pageController","useEditPage","formDefaultValues","afterSubmit","response","flashMsg","msgTitle","msgAfterSave","isDialogOpen","closeDialogs","redirect","navigate","formData","handleSubmit","submitForm","pageReady","saving","apiRequestError","inputClassName","className","style","width","height","error","id","showHeader","isSubPage","onClick","icon","title","titleClass","subTitleClass","separator","initialValues","onSubmit","values","actions","formik","checker","name","onBlur","onChange","handleChange","type","placeholder","errors","component","showUploadedFiles","uploadPath","paths","setFieldValue","fileLimit","maxFileSize","accept","multiple","onUploadError","errMsg","optionLabel","optionValue","options","showFooter","e","defaultProps","primaryKey","pageName","routeName","submitButtonLabel","formValidationError","formValidationMsg","msgBeforeSave","UserViewPage","useViewPage","item","deleteItem","PageFooter","email","openPageDialog","closeBtn","exportButton","items","command","event","id_user","model","ActionButton","msgBeforeDelete","msgAfterDelete"],"sourceRoot":""}